<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patrick Marsceill</title>
    <description>Patrick Marsceill is a working designer and developer living in Philadelphia.</description>
    <link>http://patrickmarsceill.com/</link>
    <atom:link href="http://patrickmarsceill.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Woodshedding</title>
        <description>&lt;p&gt;When I was nine, I began learning how to play percussion. I started out studying in the school band program. By eleven, I was surprisingly still interested enough to seek additional instruction. Driven by a family that already produced two other musicians, I began taking private drum lessons from an older jazz player. &lt;/p&gt;

&lt;p&gt;Beyond actually reading drum charts, improvising, practicing technique, and all the things a student might do one-on-one with an instructor, I learned how a professional musician goes about honing their craft. My teacher patiently explained that this is called &lt;em&gt;woodshedding&lt;/em&gt;. I imagined a small shack in a snow covered valley where bad musicians were banished if they messed up during a performance. Despite his best efforts, my eleven year old mind couldn’t fully understand what he was trying to explain to me.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Woodshedding isn’t a punishment. It’s a necessity. Woodshedding isn’t just practicing an instrument. Woodshedding is putting your understanding of an instrument and a song under a microscope. All of the ugliness and the mistakes come into focus. Woodshedding is working through it. Meticulously figuring it out. Dissecting a song until it’s a big mess, and then cleaning it up. Going at it until every dynamic is observed, every note and every rest is understood. Not just playing the song, but becoming so familiar with it and the theory behind it that improvising on top of it becomes the next step.&lt;/p&gt;

&lt;p&gt;I don’t study music anymore, but I still think about woodshedding. As a younger designer, I had an idealized misconception that my craft was a precise, structured practice reliant on organization and cleanliness.  Straight lines, stainless steel tools, white rooms and all that. Quite the opposite of how a jazz drummer might describe their profession. At a certain point—maybe after painfully working through projects that challenged this notion—my perspective shifted. These things really don’t seem that different to me anymore. Tearing up my work and examining all the components, consolidating, streamlining, rethinking, understanding, and rebuilding are daily rituals. I work on systems until extending and improvisation are possibilities. Making a mess is almost essential in order to maintain that kind of focus. When successful, the mess fades away with out a trace. The end result, whether it be a performance or a product or a website seem effortless to their audience.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Oct 2014 10:30:00 -0400</pubDate>
        <link>http://patrickmarsceill.com/2014/10/30/woodshedding/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2014/10/30/woodshedding/</guid>
      </item>
    
      <item>
        <title>Designing for Yourself</title>
        <description>&lt;p&gt;Redesigning my personal website has historically been a stressful process riddled with self-doubt. Designing for yourself is hard. It’s hard for individuals, it’s hard for companies, and it’s usually the project that will lose out to more pressing priorities. In past iterations of my personal site, I primarily focused on &lt;em&gt;just getting it to work&lt;/em&gt; so I could move on. Rather than spending the time to discover and enhance the details that might have elevated the experience, I raced through it to get something launched. For this version, I was very conscious of taking the time to allow these details to flourish through patience and iteration.&lt;/p&gt;

&lt;p&gt;In other mediums that I work with, like recorded music, the time spent leading up to an idea often reveals itself to be one of the most active and rewarding parts of my creative process. There is no formula for it, the only constant is time. Time to think, time to re-think, time to create, time to destroy, and time to think again. I find the same is true when designing. Most designers, like musicians, develop stronger intuitions as they gain experience. This intuition not only shapes the work itself, but it also determines when a piece of work can be deemed finished. It’s easy to forget this when working on the web due to its nature of being such a flexible format. Where recordings have the constraint of being finite and unchangeable, websites do not. Is a website ever finished? It’s certainly easier to justify “fixing it later” in the absence of this constraint, but I’ve found this can become a crutch if not consciously kept in check.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For my personal site’s redesign, I fundamentally changed my personal design process to avoid relying on this crutch. This gave me an opportunity to get back to why I started in this profession in the first place, my love of creating things. I kept things loose at first, emphasizing creating smaller ideas over the entire site’s execution. Surprisingly, the biggest challenge that I faced wasn’t in the design or development of the site, rather trusting that things would either naturally come together or be edited out as part of the process.&lt;/p&gt;

&lt;p&gt;To keep myself disciplined, I set a pace of constant ideation, followed by editing (both by myself and peers), and finally iterating in code. Once I had something resembling my site I kept refining it until it felt right. Here is general overview of what that schedule looked like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I kept a Photoshop diary for a few months.&lt;/strong&gt; I don’t know what inspired me to start doing this, but I found it to be extremely useful. Every week I forced myself to add at least one new element to it, even if it wasn’t entirely related to this site design. Just to get something out of my head and in front my eyes, without any judgment. I liken this to a personal, private &lt;a href=&quot;http://dribbble.com&quot;&gt;Dribbble&lt;/a&gt; account contained in one giant PSD file. While the majority of its contents never got used, somewhere in that messy jumble I had the beginnings of what you are seeing here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I edited and edited and edited.&lt;/strong&gt; I took everything I liked from that diary and massaged it into a loose layout. I kept refining it in Photoshop over and over until it started to resemble something like fragments of different pages. I sent early versions of the design to other designers and asked for feedback. Finally—and perhaps most importantly—I took time away from the design and came back to it with fresh eyes every few days.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I set a code deadline.&lt;/strong&gt; The design certainly wasn’t perfect in the PSD by the time I started coding it, but it didn’t need to be. By getting it into the browser by a certain date, I could make better design decisions and execute them faster. The final grid and type scale were developed entirely in code using general ideas of columns/gutter proportions and loose type sizes from the PSD. At the same time, I had little patterns established from the design comp that I iterated on and re-used throughout the site as a coded it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;I didn’t set a launch date.&lt;/strong&gt; This really wasn’t a purposeful decision. Just a feeling that if I could live with the design locally and chisel away at it until it felt right, it would evolve in the most organic way possible. I looked at the fully coded site every day for about a month (in my local dev environment), even if just for five minutes at a time. While I was browsing other sites, I would purposefully pull it up to see what the experience was like—judging how natural or jarring it felt. This lead me to discover more details that I wanted to temper and I hammered at them until they felt &lt;em&gt;done&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
	&lt;img src=&quot;/m/ps-diary.jpg&quot; alt=&quot;An screenshot of my Photoshop Diary&quot; /&gt;
	&lt;figcaption&gt;
		An excerpt from my Photoshop Diary
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Out of this thing comes a desire to try to break some of the rigidity that I impose on myself for both personal and professional projects. Designing for yourself is an exercise in confidence and trust in your own intuitions. It’s a challenge in restraint and a willingness to allow change to happen as consequence of growth. It’s a reminder to foster the formation of ideas, constantly evolve their execution, but allow their core to remain true.&lt;/p&gt;

&lt;!--aside-one--&gt;

&lt;div class=&quot;icon-post-design-self icon--post&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;inspiration-station&quot;&gt;Inspiration Station&lt;/h3&gt;

&lt;p&gt;In the process of designing this site, I studied a lot of material both online and offline. I was inspired by many other designers, writers, and creators—too many to name. Here are few of the resources that I frequently looked to for fresh ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grafik.net&quot;&gt;Grafik&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fontsinuse.net&quot;&gt;Fonts In Use&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thedieline.com&quot;&gt;The Dieline&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thegreatdiscontent.com&quot;&gt;The Great Discontent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 11 Sep 2014 15:25:00 -0400</pubDate>
        <link>http://patrickmarsceill.com/2014/09/11/designing-for-yourself/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2014/09/11/designing-for-yourself/</guid>
      </item>
    
      <item>
        <title>Prototyping Q&amp;amp;A</title>
        <description>&lt;p&gt;A few months ago &lt;a href=&quot;http://happycog.com&quot;&gt;Happy Cog™&lt;/a&gt; released &lt;a href=&quot;http://happycog.com/way&quot;&gt;The Happy Cog Way&lt;/a&gt;, an instructional video series highlighting our methods and best practices. As part of this series I created a course in &lt;a href=&quot;http://mijingo.com/products/screencasts/html-prototyping&quot;&gt;HTML Prototyping&lt;/a&gt;, a beginners guide to using &lt;a href=&quot;http://foundation.zurb.com&quot;&gt;Zurb Foundation&lt;/a&gt;, &lt;a href=&quot;http://sass-lang.com&quot;&gt;Sass&lt;/a&gt;, and &lt;a href=&quot;http://incident57.com/codekit/&quot;&gt;CodeKit&lt;/a&gt; to create responsive prototypes. Since its release, I’ve received some really great feedback about my video and the series, including this set of questions that a reader emailed me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I’m a front end dev that’s been in the business for over 15 years. I’ve always hand coded my sites, and I’ve never really gotten into grid systems. (I was working online back int the table days).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grid systems and “hand coding” are not mutually exclusive. For me, grid systems are just as much of a design tool as they are a development tool. Designers have been using proportional grids to layout designs on paper since the days before the printing press was invented. &lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In the context of web development, grids allow designers and developers to layout pages with the consistency and flexibility that modern day web development requires. While it is a good idea to use a grid to help layout your pages, you may not want an entire “front end framework” like Zurb Foundation or Twitter Bootstrap to weigh down your production-level code. At Happy Cog, we use these as tools to get ideas into the browser early, but we don’t use these for production. Here are a few options that still allow a developer to use grid-based designs efficiently in front-end production:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Roll your own. &lt;a href=&quot;http://css-tricks.com/dont-overthink-it-grids/&quot;&gt;Chris Coyier did a pretty good demo here&lt;/a&gt;. I’m not a super huge fan of using class names like &lt;code&gt;.col-1-2&lt;/code&gt; so if I were developing a site using this method, I would make all those classes Sass mixins so I could just &lt;code&gt;@include&lt;/code&gt; them within the element selectors that need to use them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use a light weight grid system framework. &lt;a href=&quot;http://susy.oddbird.net/&quot;&gt;Susy&lt;/a&gt; is a pretty good example of this. Susy is a Compass based grid framework that easily allows you to customize your grid using Sass mixins. This enables you to keep your CSS class names semantic. &lt;a href=&quot;http://neat.bourbon.io/&quot;&gt;Neat&lt;/a&gt; is a similar framework that is built on top of Bourbon, if you that is what you prefer. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While both of these options are indeed technically frameworks, they exist purely in the pre-compiled Sass layer, do not contain additional UI elements (unlike Foundation and Bootstrap), and are relatively lightweight in terms of what gets served to the user. I tend to think of them less as frameworks, and more as as set of mathematical functions that make it easier for a developer to quickly divide a page up using proportions, percentages, ems, or pixels.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Does Happy Cog use foundation for live production websites?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No we do not. Foundation requires you to use a very specific patterns for class names, and markup.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And has Happy Cog ever taken something that was prototyped out in foundation then converted it into a live website for a client?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prototypes serve as an alternative to exclusively creating paper wireframes. Their purpose is to more effectively document and communicate designs to our internal and client stakeholders. Frameworks like Foundation allow us to quickly and easily get our ideas into the browser and allow us to think about how things will scale from small to large screens. When prototyping, we aren’t as worried about the quality of the code–but the content, information architecture, and interaction design take priority. Prototyping may also be a good time for developers to get involved in thinking early about how they may approach a problem, while not actually spending time fully executing it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If Happy Cog doesn’t use foundation or convert their prototypes to live sites, isn’t it more work to try and hand code a site later to match your Foundation prototype? (You’re re-creating the styes and html but without the “cruft”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since our prototypes have essentially replaced paper wireframes in most cases–it actually speeds up the design process and facilitates more conversations between our design and development teams. This allows our front end developers to see how elements on the page should behave and then plan for the best possible implementation sooner in the process. If prototyping were not part of our process, we would spend a fairly large chunk of time trying to document the same information on paper–which can be very time consuming. Front end teams would still have to hand code the site based on paper wireframes which inevidably leaves some nuances left undocumented.  We’ve found that prototyping provides a more complete and definitive documentation, with clearer direction to stakeholders and developers alike.&lt;/p&gt;

&lt;!--aside-one--&gt;

&lt;div class=&quot;icon-post-q-and-a icon--post&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://mijingo.com/products/screencasts/html-prototyping/&quot;&gt;HTML Prototyping&lt;/a&gt; is available for purchase on &lt;a href=&quot;http://mijingo.com&quot;&gt;Mijingo.com&lt;/a&gt;. For more questions about the prototyping process, &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#112;&amp;#097;&amp;#116;&amp;#114;&amp;#105;&amp;#099;&amp;#107;&amp;#046;&amp;#109;&amp;#097;&amp;#114;&amp;#115;&amp;#099;&amp;#101;&amp;#105;&amp;#108;&amp;#108;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;email me&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Dec 2013 11:20:00 -0500</pubDate>
        <link>http://patrickmarsceill.com/2013/12/11/prototyping-q-and-a/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2013/12/11/prototyping-q-and-a/</guid>
      </item>
    
      <item>
        <title>The Russian Joe</title>
        <description>&lt;p&gt;I was looking at some old photos on Flickr and came across this. It’s from 2013’s SXSW Interactive, at Easy Tiger, just before a sizable group of people consumed the combination of beverages spread out on the table.&lt;/p&gt;

&lt;p&gt;Ryan Jahn and I spent a day biking around Austin trying to eat lunch. After multiple unsuccessful attempts, we gave up and focused our collective energy on something that would get us through the rest of the day / night. The Russian Joe was born out of lack of energy, need for sustinance, and the desire to get in some day drinking.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http://farm8.staticflickr.com/7373/9135600825_6d52df6494_c.jpg&quot; alt=&quot;Photo of 4 Russian Joes&quot; /&gt;
    &lt;figcaption&gt;
        4 Russian Joes ready for launch.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Shoot the vodka, then dump the espresso into the stout and enjoy it at a hefty pace.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h4 id=&quot;credits&quot;&gt;Credits:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Drink recipe&lt;/em&gt;: Ryan Jahn and Patrick Marsceill&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Drink name&lt;/em&gt;: Allison Wagner&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Testers&lt;/em&gt;: Who ever was with us at Easy Tiger&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Honorable mention&lt;/em&gt;: Our waitress who let us do this&lt;/li&gt;
&lt;/ul&gt;

&lt;!--aside-one--&gt;

&lt;div class=&quot;icon-post-russian-joe icon--post&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-russian-joe&quot;&gt;The Russian Joe&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1 chilled shot of Russian vodka&lt;/li&gt;
  &lt;li&gt;1 shot of espresso&lt;/li&gt;
  &lt;li&gt;1/2 pint of stout&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Jun 2013 12:34:00 -0400</pubDate>
        <link>http://patrickmarsceill.com/2013/06/26/russian-joe/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2013/06/26/russian-joe/</guid>
      </item>
    
      <item>
        <title>The Difference Between Money and Power</title>
        <description>&lt;blockquote&gt;
    &lt;p&gt;Such a waste of talent. He chose money over power, in this town a mistake nearly everyone makes. Money is the McMansion in Sarasota that starts falling apart after ten years, power is the old stone building that stands for centuries. I can not respect someone who does not see the difference&lt;/p&gt;&lt;footer&gt;&amp;mdash;Senator Francis Underwood, from Netflix&#39;s &lt;strong&gt;House of Cards&lt;/strong&gt;.&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first season of &lt;em&gt;&lt;a href=&quot;http://movies.netflix.com/WiMovie/House_of_Cards/70178217?locale=en-US&quot;&gt;House of Cards&lt;/a&gt;&lt;/em&gt; has ended for me.  I tore through the thirteen episode season in about a week after having recently cancelled my cable. I miss watching &lt;em&gt;House of Cards&lt;/em&gt;, I do not miss having cable television.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Feb 2013 12:10:00 -0500</pubDate>
        <link>http://patrickmarsceill.com/2013/02/27/the-difference-between-money-and-power/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2013/02/27/the-difference-between-money-and-power/</guid>
      </item>
    
      <item>
        <title>Building My Desk — Part Two: The Top</title>
        <description>&lt;p&gt;The conclusion to my desk building saga ended with a trip to Ikea, and the sanding, staining, and finishing of the tabletop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/m/desk/finish_process@2x.jpg&quot; /&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I would have never even considered Ikea as the place to go when searching for the top of my desk, had it not been for &lt;a href=&quot;http://spacekat.github.com/blog/2012/07/31/steel-pipe-standing-desk/&quot;&gt;Jessica’s blog post&lt;/a&gt;.  The &lt;a href=&quot;http://www.ikea.com/us/en/catalog/products/40057396/&quot;&gt;Ikea Numerär&lt;/a&gt; counter top in oak is actually the perfect size for this project and looks great after you stain and finish it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ikea.com/us/en/catalog/products/40057396/&quot;&gt;This counter&lt;/a&gt; comes in a few sizes and &lt;a href=&quot;/blog/2013/01/14/building-my-desk-part-one-the-frame/&quot;&gt;I built my frame&lt;/a&gt; to hold the 73 1/4” x 25 5/8” size top.  After getting it home (it’s way heavier than it looks), I sanded it with a hand sander and some medium grit paper.  I then used a tack cloth to get all the dust up before staining.&lt;/p&gt;

&lt;p&gt;I had some walnut stain left over from when I finished the hardwood floors in my house, so I evenly applied it to the countertop with a clean rag and let it absorb into the wood for about five minutes.  After wiping off the excess, I let the stain dry overnight before finishing it with polyurethane.&lt;/p&gt;

&lt;p&gt;I applied one coat of poly, let it dry for about 4 hours. Lightly sanded it, wiped it down with another tack cloth, and  applied another coat.  Due to the impending thunderstorm, I had to act rather quickly and didn’t have time to apply a third or fourth coat—which I would highly recommend doing.&lt;/p&gt;

&lt;p&gt;I got the finished countertop onto the frame I built, centered it, marked off where the screws would be going with a pencil and  drilled the pilot holes.  The oak top is very hard wood and it would be extremely difficult to screw into it without drilling pilot holes first. The screws went in a bit harder than I expected—mostly due to awkward angles. Finally, I eagerly setup my desk for its first test run that evening.&lt;/p&gt;

&lt;h3 id=&quot;a-success&quot;&gt;A success.&lt;/h3&gt;

&lt;p&gt;I’ve been using it now for about a month and it is by far the best desk I’ve ever owned.  I added a keyboard tray too keep the desktop clutter free, and its perfect for my setup.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/m/desk/finished_desk@2x.jpg&quot; /&gt;
    &lt;figcaption&gt;
        A rather crappy photo of the completed desk.
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!--aside-one--&gt;

&lt;h3 id=&quot;theres-more&quot;&gt;Theres more…&lt;/h3&gt;
&lt;p&gt;This is just part two of &lt;a href=&quot;/2013/01/14/building-my-desk-part-one-the-frame/&quot;&gt;two&lt;/a&gt; posts outlining the construction of the &lt;a href=&quot;/2013/01/14/building-my-desk-part-one-the-frame/&quot;&gt;frame&lt;/a&gt; and top of my desk.&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Feb 2013 23:04:00 -0500</pubDate>
        <link>http://patrickmarsceill.com/2013/02/13/building-my-desk-part-two-the-top/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2013/02/13/building-my-desk-part-two-the-top/</guid>
      </item>
    
      <item>
        <title>Building My Desk &amp;mdash; Part One: The Frame</title>
        <description>&lt;p&gt;Over the last week and a half, I designed and constructed a new desk for my home office.  If you &lt;a href=&quot;http://instagram.com/pmarsceill&quot; title=&quot;Patrick Marsceill&#39;s Instagram&quot;&gt;follow me on Instagram&lt;/a&gt; you might have seen some of the progress photos that I’ve been posting.  I wanted to document my experience building this thing and what learned along the way. This was not only one of my favorite construction projects from a process perspective, but also my favorite finished product.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;First, a little backstory&lt;/em&gt;… A few years ago, I saw &lt;a href=&quot;http://www.apartmenttherapy.com/morgans-amazing-diy-shelving-97760&quot;&gt;this post on Apartment Therapy&lt;/a&gt; about constructing shelving from steel plumbing pipe. I instantly latched on to this idea and added it to the list of projects that I wanted to take on in my then—new house. If you’re a home-owner, you know that this list quickly gets re-prioritized in favor of things leaking, mold growing, and whatever else requires immediate (and usually expensive) repair.  Needless to say, the pipe-shelving project had been in the back of my head for a few years.&lt;/p&gt;

&lt;p&gt;About a month ago, I stumbled upon &lt;a href=&quot;http://spacekat.github.com&quot;&gt;Jessica’s blog&lt;/a&gt; through a link  that someone posted on Twitter about some of her work at Engine Yard. I then found my way to &lt;a href=&quot;http://spacekat.github.com/blog/2012/07/31/steel-pipe-standing-desk/&quot;&gt;this very detailed post about how she constructed a standing desk&lt;/a&gt;, using similar materials and construction methods as the shelving unit mentioned above.  This immediately got the gears turning in my head and I spent a few days imagining how I could construct something like this.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/m/desk/plans@2x.jpg&quot; /&gt;
	&lt;figcaption&gt;
		Plans for my desk.
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Unlike Jessica’s desk, I didn’t want mine to be that of the standing variety.  I did some research and found &lt;a href=&quot;http://www.apartmenttherapy.com/look-desks-and-68448&quot;&gt;a few photos of other sitting desks that people had made out of plumbing pipe&lt;/a&gt;. Based on these photos and Jessica’s design, I sketched out some plans borrowing ideas from both.&lt;/p&gt;

&lt;p&gt;Next, I took an inventory of everything I would need to execute this plan and headed off to &lt;a href=&quot;http://www.lowes.com&quot;&gt;Lowe’s&lt;/a&gt;. As Jessica noted, Lowe’s will cut and thread the pipes for you right in the aisle. They also have pre-cut and pre-threaded pipes from about 1 inch through 20 inches in length.&lt;/p&gt;

&lt;h3 id=&quot;parts-required-to-build-the-frame&quot;&gt;Parts required to build the frame&lt;/h3&gt;

&lt;p&gt;All parts galvanized steel, 1” diameter and the fittings made by Mueller&lt;/p&gt;

&lt;h4 id=&quot;fittings&quot;&gt;Fittings:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;5 x Flanges&lt;/li&gt;
  &lt;li&gt;11 x “T” Joints&lt;/li&gt;
  &lt;li&gt;6 x Elbow Joints&lt;/li&gt;
  &lt;li&gt;4 x End Caps&lt;/li&gt;
  &lt;li&gt;16 x ‘close’ pipe nipple&lt;/li&gt;
  &lt;li&gt;1 x 4” pipe nipple&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pipes&quot;&gt;Pipes:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;4 x 21.5”&lt;/li&gt;
  &lt;li&gt;2 x 28”&lt;/li&gt;
  &lt;li&gt;4 x 18”&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;finishing-products&quot;&gt;Finishing Products:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;1 bottle of spray degreaser, citrus scented&lt;/li&gt;
  &lt;li&gt;1 can of Rustoleum spray metal primer&lt;/li&gt;
  &lt;li&gt;1 can of Rustoleum matte black spray paint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I got home, I decided to clean all the parts and quickly assemble the frame (without measuring or really tightening anything) just to make sure I had all the pieces I needed.  The saw and the pipe threading machine at Lowe’s gets the pipes pretty greasy, so I used some spray degreaser and rags to clean each piece and remove any stickers.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/m/desk/mock_frame@2x.jpg&quot; /&gt;
	&lt;figcaption&gt;
		The frame all mocked up and cleaned.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;img src=&quot;/m/desk/primed@2x.jpg&quot; /&gt;
	&lt;figcaption&gt;
	The frame primed and ready for paint.
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The next weekend, it was time to prime and paint the frame.  I reconstructed the frame and measured all the fittings, legs, and connectors to ensure I had a symmetrical table before it was too late to turn back.  I put on one coat of primer, let it dry for about 2 hours, and then one coat of spray paint.  This actually used up the entire can of paint and if I could do it again, I would have bought another can for a second coat.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/m/desk/painted@2x.jpg&quot; /&gt;
	&lt;figcaption&gt;
	The frame painted.
	&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!--aside-one--&gt;

&lt;h3 id=&quot;theres-more&quot;&gt;Theres more…&lt;/h3&gt;
&lt;p&gt;This is just part one of &lt;a href=&quot;/2013/02/13/building-my-desk-part-two-the-top/&quot;&gt;two&lt;/a&gt; posts outlining the construction of the frame and &lt;a href=&quot;/2013/02/13/building-my-desk-part-two-the-top/&quot;&gt;top of my desk&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Jan 2013 16:15:00 -0500</pubDate>
        <link>http://patrickmarsceill.com/2013/01/14/building-my-desk-part-one-the-frame/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2013/01/14/building-my-desk-part-one-the-frame/</guid>
      </item>
    
      <item>
        <title>How I Setup My Machine for Prototyping</title>
        <description>&lt;p&gt;A few weeks ago, I wrote &lt;a href=&quot;http://cognition.happycog.com/article/its-alive-prototyping-in-the-browser&quot;&gt;a post for Cognition&lt;/a&gt; explaining my process for creating prototypes and how I arrived there. After being asked for more technical detail around my actual setup, I decided to create this step by step guide.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This was written for those using a Mac running OSX 10.7 or later.&lt;/em&gt;&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;step-1-mdash-install-xcode-and-the-command-line-tools&quot;&gt;Step 1 — Install Xcode and the “Command Line Tools”&lt;/h3&gt;

&lt;p&gt;You can &lt;a href=&quot;http://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;amp;mt=12&quot; title=&quot;Apple Xcode Download&quot;&gt;download and install Xcode from Apple’s App store&lt;/a&gt; after creating a &lt;a href=&quot;https://developer.apple.com&quot; target=&quot;_blank&quot; title=&quot;Apple Developers&quot;&gt;Developer Account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;/images/blog/prototype-setup/xcode-prefs.png Xcode Preferences #2&lt;/p&gt;

&lt;p&gt;After Xcode is downloaded and installed, there is another step that I always forget about. I mean &lt;em&gt;always&lt;/em&gt;… And it takes me a good 20 minutes of cursing trying figure out why my compiler is taking a dump.  So here is what you gotta do:  You open up Xcode and select “Preferences…” from the Xcode menu and manually install the “Command Line Tools” by clicking “Downloads” tab, and then the “Install” button next to the item in the list.&lt;/p&gt;

&lt;p&gt;/images/blog/prototype-setup/install-commandline.png Install Command Line Tools&lt;/p&gt;

&lt;p&gt;…AND you have to do this step every time you upgrade to the latest version of OSX as well.&lt;/p&gt;

&lt;h3 id=&quot;step-2-mdash-install-rvm-and-a-non-system-version-of-ruby&quot;&gt;Step 2 — Install RVM and a non-system version of Ruby&lt;/h3&gt;

&lt;p&gt;I don’t like to muck around with the version of Ruby that comes installed with OSX. &lt;a href=&quot;https://rvm.io&quot; title=&quot;Ruby Version Manager Project Site&quot;&gt;RVM (Ruby Version Manager)&lt;/a&gt; is a useful piece of software that lets you have segregated versions of Ruby installed at the same time. This lets us start from a clean Ruby enviroment every time, upgrade very easily, and not have to worry much about system configuration.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is where you need to open up Terminal and get busy…&lt;/em&gt;
#### Install RVM &amp;amp; install the latest stable version of Ruby&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\c&lt;/span&gt;url -L https://get.rvm.io &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash -s stable --ruby&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;verify-you-a-running-on-the-newly-installed-rvm-version-of-ruby&quot;&gt;Verify you a running on the newly installed “RVM” version of Ruby&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which ruby
/Users/patrickmarsceill/.rvm/rubies/ruby-1.9.3-p327/bin/ruby&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important thing to note here is the &lt;code&gt;/.rvm/rubies/ruby-1.9.3-p327&lt;/code&gt;.  Your version numbers may be different, and thats ok but the path should be &lt;code&gt;/.rvm/rubies/ruby-x.x.x-pxxx&lt;/code&gt;.  If you don’t see something like this, you should switch to the newly installed version:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm use 1.9.3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This just tells your machine to switch to Ruby 1.9.3 installed by RVM.  You may have a different version number installed by RVM, in which case you would run &lt;code&gt;rvm use 1.9.2&lt;/code&gt; or &lt;code&gt;rvm use 1.9.4&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;step-3-mdash-install-git&quot;&gt;Step 3 — Install Git&lt;/h3&gt;

&lt;p&gt;The easiest way to install Git on an OSX machine is to &lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;download and install the Universal .dmg file from git-scm.com&lt;/a&gt;.  There are other ways to do this from the command line, if you are a Homebrew user like me you can use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-4-mdash-build-your-development-environment&quot;&gt;Step 4 — Build your development environment&lt;/h3&gt;

&lt;p&gt;/images/blog/prototype-setup/active-projects.png Active Projects Folder&lt;/p&gt;

&lt;p&gt;Create and/or open the folder where you might want to house all your prototyping projects. I like to use a folder called “_active” where all my current projects live.&lt;/p&gt;

&lt;p&gt;Switch back over to terminal and CD (change directories) by typing &lt;code&gt;cd&lt;/code&gt; and then a space, &lt;em&gt;do not press “Enter” yet&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then drag the folder icon (in this case it’s called “_Active”) immediately following the space after &lt;code&gt;cd&lt;/code&gt;.  Like magic, the full path to this location will appear after the &lt;code&gt;cd&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Users/patrickmarsceill/Dropbox/_Active&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Press “Enter”&lt;/p&gt;

&lt;h4 id=&quot;now-its-time-to-get-some-development-tools-and-start-building&quot;&gt;Now it’s time to get some development tools and start building:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;controversialname&amp;gt;&lt;/code&gt; “StrapOn” &lt;code&gt;&amp;lt;/controversialname&amp;gt;&lt;/code&gt; is a pre-packaged set of tools and rake commands that I build with the help of my friend &lt;a href=&quot;http://stephentudor.com&quot; title=&quot;Stephen Tudor&#39;s Blog&quot;&gt;Stephen&lt;/a&gt; for quickly building HTML prototypes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;From your current location in Terminal run:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:pmarsceill/StrapOn.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will pull down a directory called “StrapOn” that you can use as a starter for your projects.  A more detailed tutorial is in the works, but to get started &lt;code&gt;cd&lt;/code&gt; into the “StrapOn” directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;StrapOn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then install all the tools that are needed for this project by running:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If successful you should see something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;Your bundle is &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;! Use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bundle show &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;gemname&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to see where a bundled gem is installed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start the StrapOn dev mode by running this rake command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake start

DEPRECATION WARNING: ActiveSupport::Memoizable is deprecated and will be removed in future releases,simply use Ruby memoization pattern instead. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;called from require at /Users/patrickmarsceill/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


StrapOn starting.....................

DEPRECATION WARNING: ActiveSupport::Memoizable is deprecated and will be removed in future releases,simply use Ruby memoization pattern instead. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;called from require at /Users/patrickmarsceill/.rvm/rubies/ruby-1.9.3-p327/lib/ruby/site_ruby/1.9.1/rubygems/custom_require.rb:36&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
DEPRECATION WARNING: ActiveSupport::Memoizable is deprecated and will be removed in future releases,simply use Ruby memoization pattern instead. &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;called from require at /Users/patrickmarsceill/Desktop/StrapOn/config.ru:14&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-11-19 17:02:23&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  WEBrick 1.3.1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-11-19 17:02:23&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  ruby 1.9.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012-11-10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-darwin12.2.0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2012-11-19 17:02:23&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; INFO  WEBrick::HTTPServer#start: &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30507 &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voila, StrapOn has started a local server on your machine that you can use for development by pointing your browser to: &lt;code&gt;http://localhost:4000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;/images/blog/prototype-setup/strapon-browser.png StrapOn running on a local machine &lt;/p&gt;

&lt;p&gt;This also includes starts an auto-compiler for SASS, and all the built-in templating engine included in the Serve gem. Both of which will be explained in my next post about developing with StrapOn.&lt;/p&gt;

&lt;!--aside-one--&gt;

&lt;h3 id=&quot;downloads&quot;&gt;Downloads&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;amp;mt=12&quot;&gt;Command Line Tools (Included in Xcode)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rvm.io/&quot;&gt;Ruby Version Manager (RVM)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 19 Nov 2012 17:27:00 -0500</pubDate>
        <link>http://patrickmarsceill.com/2012/11/19/how-i-setup-my-machine-for-prototyping/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2012/11/19/how-i-setup-my-machine-for-prototyping/</guid>
      </item>
    
      <item>
        <title>First.</title>
        <description>&lt;p&gt;I can’t think of a better first post than to &lt;a href=&quot;http://cognition.happycog.com/article/its-alive-prototyping-in-the-browser&quot; target=&quot;_blank&quot; title=&quot;Its Alive: Prototying in the Browser&quot;&gt;link you to something I wrote on Cognition.&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/m/blast_off-large.jpg&quot; /&gt;
	&lt;figcaption&gt;Convair/General Dynamics Atlas from the San Diego Air and Space Museum Archive&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
        <pubDate>Wed, 24 Oct 2012 15:36:00 -0400</pubDate>
        <link>http://patrickmarsceill.com/2012/10/24/first/</link>
        <guid isPermaLink="true">http://patrickmarsceill.com/2012/10/24/first/</guid>
      </item>
    
  </channel>
</rss>
