@import "../support/index";

// stylelint-disable block-opening-brace-space-after, block-opening-brace-space-before, primer/selector-no-utility

// Position utilites
.position-static   { position: static !important; }
.position-relative { position: relative !important; }
.position-absolute { position: absolute !important; }
.position-fixed    { position: fixed !important; }

// Responsive position utlities
// .position-sm-static, .position-lg-absolute, ...
@each $media-query in map-keys($media-queries) {
  @include mq($media-query) {
    .position-#{ $media-query }-static   { position: static !important; }
    .position-#{ $media-query }-relative { position: relative !important; }
    .position-#{ $media-query }-absolute { position: absolute !important; }
    .position-#{ $media-query }-fixed    { position: fixed !important; }
  }
}

.top-0    { top: 0 !important; }
.right-0  { right: 0 !important; }
.bottom-0 { bottom: 0 !important; }
.left-0   { left: 0 !important; }

.width-full  { width: 100% !important; }
.height-full { height: 100% !important; }

// Display utilites
.d-block        { display: block !important; }
.d-flex         { display: flex !important; }
.d-inline       { display: inline !important; }
.d-inline-block { display: inline-block !important; }
.d-table        { display: table !important; }
.d-table-cell   { display: table-cell !important; }
.d-none         { display: none !important; }

// Responsive display utlities
// .d-sm-none, .d-lg-inline, ...
@each $media-query in map-keys($media-queries) {
  @include mq($media-query) {
    .d-#{ $media-query }-block        { display: block !important; }
    .d-#{ $media-query }-flex         { display: flex !important; }
    .d-#{ $media-query }-inline       { display: inline !important; }
    .d-#{ $media-query }-inline-block { display: inline-block !important; }
    .d-#{ $media-query }-table        { display: table !important; }
    .d-#{ $media-query }-table-cell   { display: table-cell !important; }
    .d-#{ $media-query }-none         { display: none !important; }
  }
}

// Overflow utilities
// overflow-hidden can also be used to create a new
// block formatting context or clear floats.
.overflow-hidden { overflow: hidden !important; }
.overflow-scroll { overflow: scroll !important; }
.overflow-auto   { overflow: auto !important; }

// Vertical alignment
.v-align-top    { vertical-align: top !important; }
.v-align-middle { vertical-align: middle !important; }
.v-align-bottom { vertical-align: bottom !important; }
.a-center       { align-items: center !important; }

// Whitespace
.ws-normal { white-space: normal !important; }
.ws-nowrap { white-space: nowrap !important; }

// Clear floats
.clearfix    { @include clearfix; }
.clear-both  { clear: both !important; }
.clear-right { clear: right !important; }
.clear-left  { clear: left !important; }

// Floats
.float-right { float: right !important; }

@each $media-query in map-keys($media-queries) {
  @include mq($media-query) {
    .float-#{$media-query}-right  { float: right !important; }
  }
}

.float-left { float: left !important; }

@each $media-query in map-keys($media-queries) {
  @include mq($media-query) {
    .float-#{$media-query}-left  { float: left !important; }
  }
}

.float-none { float: none !important; }

@each $media-query in map-keys($media-queries) {
  @include mq($media-query) {
    .float-#{$media-query}-none  { float: none !important; }
  }
}

// Visually hidden
.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
  border: 0 !important;

  &.focusable:active,
  &.focusable:focus {
    position: static !important;
    width: auto !important;
    height: auto !important;
    margin: 0 !important;
    overflow: visible !important;
    clip: auto !important;
  }
}

// Flexbox specific utilites based on Primer
// https://github.com/primer/primer/blob/master/modules/primer-utilities/lib/flexbox.scss

@mixin flexUtility($breakpoint: 0) {

  // This is the breakpoint that will be inserted into class names
  $breakstring: -#{$breakpoint}; // example: `.d-sm-flex`

  // If there's no breakpoint, the $breakstring value will be blank.
  @if $breakpoint == 0 {
    $breakstring: ""; // example: `.d-flex`
  }

  // Flexbox classes
  // Container

  .flex#{$breakstring}-row         { flex-direction: row !important; }
  .flex#{$breakstring}-row-reverse { flex-direction: row-reverse !important; }
  .flex#{$breakstring}-column      { flex-direction: column !important; }

  .flex#{$breakstring}-wrap     { flex-wrap: wrap !important; }
  .flex#{$breakstring}-nowrap   { flex-wrap: nowrap !important; }

  .flex#{$breakstring}-justify-start    { justify-content: flex-start !important; }
  .flex#{$breakstring}-justify-end      { justify-content: flex-end !important; }
  .flex#{$breakstring}-justify-center   { justify-content: center !important; }
  .flex#{$breakstring}-justify-between  { justify-content: space-between !important; }
  .flex#{$breakstring}-justify-around   { justify-content: space-around !important; }

  .flex#{$breakstring}-items-start      { align-items: flex-start !important; }
  .flex#{$breakstring}-items-end        { align-items: flex-end !important; }
  .flex#{$breakstring}-items-center     { align-items: center !important; }
  .flex#{$breakstring}-items-baseline   { align-items: baseline !important; }
  .flex#{$breakstring}-items-stretch    { align-items: stretch !important; }

  .flex#{$breakstring}-content-start    { align-content: flex-start !important; }
  .flex#{$breakstring}-content-end      { align-content: flex-end !important; }
  .flex#{$breakstring}-content-center   { align-content: center !important; }
  .flex#{$breakstring}-content-between  { align-content: space-between !important; }
  .flex#{$breakstring}-content-around   { align-content: space-around !important; }
  .flex#{$breakstring}-content-stretch  { align-content: stretch !important; }

  // Item
  .flex#{$breakstring}-auto { flex: 1 1 auto !important; }
  .flex#{$breakstring}-shrink-0 { flex-shrink: 0 !important; }

  .flex#{$breakstring}-self-auto        { align-self: auto !important; }
  .flex#{$breakstring}-self-start       { align-self: flex-start !important; }
  .flex#{$breakstring}-self-end         { align-self: flex-end !important; }
  .flex#{$breakstring}-self-center      { align-self: center !important; }
  .flex#{$breakstring}-self-baseline    { align-self: baseline !important; }
  .flex#{$breakstring}-self-stretch     { align-self: stretch !important; }

  // Shorthand for equal width and height cols
  .flex#{$breakstring}-item-equal {
    flex-grow: 1;
    flex-basis: 0;
  }
}

// Generate basic flexbox classes
@include flexUtility();

// Loop through the breakpoint values to create responsive classes
@each $media-query in map-keys($media-queries) {

  // Loop through the spacer values
  @include mq($media-query) {
    @include flexUtility($media-query);
  }
}
